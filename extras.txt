@app.route('/api/getInfoDetailed/<string:name>/<int:id>', strict_slashes=False, methods=["GET"])
def getInfoDetailed(name, id):
    user = User.query.filter_by(name=name, id=id).first()

    if user is None:
        return jsonify({"error": "This admin does not exist"}), 404

    if not user.is_admin:
        return jsonify({"error": "You are not authorized"}), 401

    users = User.query.all()
    user_list = []
    for user in users:
        user_data = {
            "id": user.id,
            "name": user.name,
            "email": user.email,
            "is_admin": user.is_admin,
        }
        user_list.append(user_data)

    if user_list:
        return jsonify(user_list), 200



@app.route('/', methods=['GET'])
@app.route('/api/getinfo', methods=["GET"])
def getInfo():
    user = {"user":
            {
                "name": "required",
                "email": "required",
                "password": "required"
            }
            }
    submission = {"submission":
                  {
                      "file": "default",
                      "image": "if required",
                      "user_id": "required",
                      "hackathon_id": "required"
                  }
                  }
    required_data = [user, submission]
    return jsonify(required_data, 200)



Many-to-many relationships are fairly common in many (ahem) applications, and this is to remind myself how to create them - I always seem to forget! These are known as has_many :through associations in the Ruby on Rails world, and are needed whenever any Object A can have many Object B records, and any Object B can also be associated with many Object A records.

One real-world example would be an ecommerce site with database models for Users and Products - a User can have many Products through a secondary table (ie Orders), and a Product can be purchased by many Users through the same Orders table.

In this case, the concept of an "order" which associates users with products is fairly well known - but in situations where this does not apply, it is common to name this secondary table as a combination of both bodels (ie "UserProducts" if the concept of "Orders" is not commonly known). 

Here's how to define it in Flask / SQLAlchemy models.

1. Define your User model
This could look like:


from sqlalchemy.orm import relationship

class User(BaseModel):
    __tablename__ = 'users'

    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(255))

    # ... any other fields

    create_dttm = db.Column(db.DateTime, server_default=db.func.current_timestamp())

    products = relationship("Product", secondary="orders")

2. Define the Product model

from sqlalchemy.orm import relationship

class Product(BaseModel):
    __tablename__ = 'products'

    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(255))

    # ... any other fields

    create_dttm = db.Column(db.DateTime, default=datetime.utcnow)

    users = relationship("User", secondary="orders")

3. And finally, the association table

from sqlalchemy.orm import relationship, backref

class Order(BaseModel):
    __tablename__ = 'orders'
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'))
    product_id = db.Column(db.Integer, db.ForeignKey('products.id'))

    # ... any other fields

    dttm = db.Column(db.DateTime, default=datetime.utcnow)

    user = relationship(User, backref=backref("orders", cascade="all, delete-orphan"))
    product = relationship(Product, backref=backref("orders", cascade="all, delete-orphan"))

4. Usage
Once these models have been defined and imported (and presumably your database tables have been created), you can use them easily:


user = User.query.first()
user.products  # List all products, eg [<productA>, <productB> ]
user.orders    # List all orders, eg [<order1>, <order2>]
user.orders[0].products  # List products from the first order

p1 = Product.query.first()
p1.users  # List all users who have bought this product, eg [<user1>, <user2>]





import base64


        data = {
            "id": hackathon.id,
            "title": hackathon.title,
            "description": hackathon.description,
            "bg_image": get_base64_image('bg_imgs', hackathon.bg_image),
            "hakthon_img": get_base64_image('hakthon_imgs', hackathon.hakthon_img),
            "submission_type": hackathon.submission_type,
            "rewards": hackathon.rewards,
            "created_at": hackathon.created_at,
            "start_datetime": hackathon.start_datetime,
            "end_datetime": hackathon.end_datetime,
            "creator_id": hackathon.creator_id,
        }
        hackathons_list.append(data)
    return jsonify(hackathons_list), 200

# def get_base64_image(folder_name, filename):
#     folder_path = os.path.join(app.config['UPLOAD_FOLDER'], folder_name)
#     image_path = os.path.join(folder_path, filename)
#     with open(image_path, "rb") as f:
#         encoded_img = base64.b64encode(f.read()).decode("utf-8")
#     return encoded_img



from flask import  send_from_directory
def get_img_url(folder_name, filename):
    return send_from_directory(os.path.join(app.config['UPLOAD_FOLDER'], folder_name), filename)




@app.route('/api/gethackathons', methods=["GET"])
def get_hackathons():
    hackathons = Hackathon.query.all()
    hackathons_list = []

    for hackathon in hackathons:
        data = {
            "id": hackathon.id,
            "title": hackathon.title,
            "description": hackathon.description,
            "bg_image": get_img_url('bg_imgs', hackathon.bg_image),
            "hakthon_img": get_img_url('hakthon_imgs', hackathon.hakthon_img),
            "submission_type": hackathon.submission_type,
            "rewards": hackathon.rewards,
            "created_at": hackathon.created_at,
            "start_datetime": hackathon.start_datetime.isoformat() if hackathon.start_datetime else None,
            "end_datetime": hackathon.end_datetime.isoformat() if hackathon.start_datetime else None,
            "creator_id": hackathon.creator_id,
        }
        hackathons_list.append(data)
    return jsonify(hackathons_list), 200



@app.route('/', methods=['POST'])
def upload_file():
    if request.method == 'POST':

        if 'file' not in request.files:
            flash('No file part')
            return redirect(request.url)

        file = request.files['file']

        if file.filename == '':
            flash('No file selected for uploading')
            return redirect(request.url)

        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            flash('File successfully uploaded')
            return redirect('/')
        else:
            flash('Allowed file types are txt, pdf, png, jpg, jpeg, gif')
            return redirect(request.url)


if __name__ == "__main__":
    app.run(host='127.0.0.1',port=5000)




# API endpoint to get all hackathons
@app.route('/api/gethackathons', methods=['GET'])
def get_hackathons():
    hackathons_data = Hackathon.query.all()
    hackathons_list = []

    for hackathon in hackathons_data:
        data = {
            "id": hackathon.id,
            "title": hackathon.title,
            "description": hackathon.description,
            "bg_image": f"/uploads/bg_imgs/{hackathon.bg_image}",
            "hakthon_img": f"/uploads/hakthon_imgs/{hackathon.hakthon_img}",
            "submission_type": hackathon.submission_type,
            "rewards": hackathon.rewards,
            "created_at": hackathon.created_at,
            "start_datetime": hackathon.start_datetime,
            "end_datetime": hackathon.end_datetime,
            "creator_id": hackathon.creator_id
        }
        hackathons_list.append(data)

    return jsonify(hackathons_list), 200